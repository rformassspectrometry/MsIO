[{"path":"https://rformassspectrometry.github.io/MsIO/articles/MsIO.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Storage Modes of MS Data Objects","text":"Data objects R can serialized disk R’s Rds format using base R save() function re-imported using load() function. R-specific binary data format can however used read programming languages preventing thus exchange R data objects software programming languages. MsIO package provides functionality export import mass spectrometry data objects various storage formats aiming facilitate data exchange software. includes, among formats, also storage data objects using Bioconductor’s alabaster.base package. export import MS data objects, saveMsObject() readMsObject() functions can used. saveMsObject(), first parameter MS data object stored, readMsObject() defines type MS object restored (returned). second parameter param defines configures storage format MS data. currently supported formats respective parameter objects : PlainTextParam: storage data plain text file format. AlabasterParam: storage MS data using Bioconductor’s alabaster.base framework based files HDF5 JSON format. storage formats described details following sections. example use functions parameters: saveMsObject(x, param = PlainTextParam(storage_path)) store MS data object assigned variable x directory storage_path using plain text file format. restore data (assuming x instance MsExperiment class): readMsObject(MsExperiment(), param = PlainTextParam(storage_path)).","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/articles/MsIO.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Storage Modes of MS Data Objects","text":"package can installed BiocManager package. install BiocManager use install.packages(\"BiocManager\") , , BiocManager::install(\"RforMassSpectrometry/MsIO\") install package. import export MS data objects installation additional Bioconductor packages might needed: Spectra (BiocManager::install(\"Spectra\")) import export Spectra MsBackendMzR objects. MsExperiment (BiocManager::install(\"MsExperiment\")) import export MsExperiment objects. xcms (BiocManager::install(\"xcms\")) import export XcmsExperiment objects (result objects xcms-based preprocessing).","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/articles/MsIO.html","id":"plain-text-file-format","dir":"Articles","previous_headings":"","what":"Plain text file format","title":"Storage Modes of MS Data Objects","text":"Storage MS data objects plain text format aims support easy exchange data, particular analysis results, external software, MS-DIAL mzmine3. cases, data stored tabulator delimited text files simplifying use data results across multiple programming languages, import spreadsheet applications. MS data objects stored plain text format can also fully re-imported R providing thus alternative, flexible, object serialization approach R internal Rds/RData format. create MS data object (MsExperiment) representing data two raw MS data files assign sample annotation information data files. can export data object plain text files using MsIO’s saveMsObject() function combination PlainTextParam parameter object. path directory data stored can defined path parameter PlainTextParam. call store MS data object temporary directory. data exported set text files list : text file contains information one particular slot MS data object. See ?PlainTextParam help description files respective formats. can restore MS data object using readMsObject() function, specifying type object want restore (stored respective directory) first parameter function data storage format second. example use MsExperiment() first parameter PlainTextParam second. MS data MsExperiment data object represented Spectra object, thus, import data need addition load Spectra package. Note present MsIO support storage full MS data (.e. individual mass peaks’ m/z intensity values) plain text file. MsIO supports storage -disk data objects/representations (MsBackendMzR object) plain text formats. Spectra object used represent MS data example MsExperiment object uses MsBackendMzR backend thus able export import data. Due -disk data mode, type backend retrieves MS data --fly original data files hence need store MS metadata location original data files. Thus, also restored MS data object full access MS data: However, ff location original MS data files changed (e.g. files stored object moved different location file system), new location files needed specified parameter spectraPath (e.g. readMsObject(MsExperiment(), PlainTextParam(d), spectraPath = <path new location>)). Generally, saveMsData() stores MS data objects modular way, .e. content component slot exported data file. storage directory example MsExperiment contains thus multiple data files: modularity allows also load parts original data. can example also load Spectra object representing MS experiment’s MS data. even MsBackendMzR used Spectra object represent MS data.","code":"library(MsIO) library(MsExperiment)  fls <- dir(system.file(\"TripleTOF-SWATH\", package = \"msdata\"),            full.names = TRUE) mse <- readMsExperiment(     fls,     sampleData = data.frame(name = c(\"Pestmix1 DDA\", \"Pestmix SWATH\"),                             mode = c(\"DDA\", \"SWATH\"))) mse ## Object of class MsExperiment  ##  Spectra: MS1 (5626) MS2 (10975)  ##  Experiment data: 2 sample(s) ##  Sample data links: ##   - spectra: 2 sample(s) to 16601 element(s). d <- file.path(tempdir(), \"ms_experiment_export\") saveMsObject(mse, PlainTextParam(path = d)) dir(d) ## [1] \"ms_backend_data.txt\"                         ## [2] \"ms_experiment_link_mcols.txt\"                ## [3] \"ms_experiment_sample_data_links_spectra.txt\" ## [4] \"ms_experiment_sample_data.txt\"               ## [5] \"spectra_processing_queue.json\"               ## [6] \"spectra_slots.txt\" library(Spectra) mse_in <- readMsObject(MsExperiment(), PlainTextParam(d)) mse_in ## Object of class MsExperiment  ##  Spectra: MS1 (5626) MS2 (10975)  ##  Experiment data: 2 sample(s) ##  Sample data links: ##   - spectra: 2 sample(s) to 16601 element(s). spectra(mse_in) |>     head() |>     intensity() ## NumericList of length 6 ## [[1]] 0.0307632219046354 0.163443520665169 ... 0.507792055606842 ## [[2]] 0.124385602772236 0.306980639696121 ... 0.752154946327209 ## [[3]] 0.140656530857086 0.194816112518311 ... 0.455461025238037 ## [[4]] 0.0389336571097374 0.357547700405121 ... 0.478326231241226 ## [[5]] 0.124386593699455 0.054143700748682 ... 0.251276850700378 ## [[6]] 0.0940475389361382 0.247442871332169 ... 0.10762557387352 dir(d) ## [1] \"ms_backend_data.txt\"                         ## [2] \"ms_experiment_link_mcols.txt\"                ## [3] \"ms_experiment_sample_data_links_spectra.txt\" ## [4] \"ms_experiment_sample_data.txt\"               ## [5] \"spectra_processing_queue.json\"               ## [6] \"spectra_slots.txt\" s <- readMsObject(Spectra(), PlainTextParam(d)) s ## MSn data (Spectra) with 16601 spectra in a MsBackendMzR backend: ##         msLevel     rtime scanIndex ##       <integer> <numeric> <integer> ## 1             1     0.231         1 ## 2             1     0.351         2 ## 3             1     0.471         3 ## 4             1     0.591         4 ## 5             1     0.711         5 ## ...         ...       ...       ... ## 16597         2   899.527      8995 ## 16598         2   899.624      8996 ## 16599         2   899.721      8997 ## 16600         2   899.818      8998 ## 16601         2   899.915      8999 ##  ... 27 more variables/columns. ##  ## file(s): ## PestMix1_DDA.mzML ## PestMix1_SWATH.mzML be <- readMsObject(MsBackendMzR(), PlainTextParam(d)) be ## MsBackendMzR with 16601 spectra ##         msLevel     rtime scanIndex ##       <integer> <numeric> <integer> ## 1             1     0.231         1 ## 2             1     0.351         2 ## 3             1     0.471         3 ## 4             1     0.591         4 ## 5             1     0.711         5 ## ...         ...       ...       ... ## 16597         2   899.527      8995 ## 16598         2   899.624      8996 ## 16599         2   899.721      8997 ## 16600         2   899.818      8998 ## 16601         2   899.915      8999 ##  ... 27 more variables/columns. ##  ## file(s): ## PestMix1_DDA.mzML ## PestMix1_SWATH.mzML"},{"path":"https://rformassspectrometry.github.io/MsIO/articles/MsIO.html","id":"alabaster-based-formats","dir":"Articles","previous_headings":"","what":"alabaster-based formats","title":"Storage Modes of MS Data Objects","text":"alabaster framework related Bioconductor package alabaster.base implements methods save variety R/Bioconductor objects -disk representations based standard file formats like HDF5 JSON. ensures Bioconductor objects can easily read languages like Python Javascript. AlabasterParam, MsIO supports export MS data objects storage formats. export example MsExperiment storage directory using alabaster format. contents storage folder listed : contrast plain text format described previous section, stores data files single directory, alabaster export structured hierarchically sub-folders MS data object’s slots/components. restore object use readMsObject() function AlabasterParam parameter objects define used data storage format. Also format, can load parts data separately. can load MS data Spectra object respective subfolder data storage directory: import/export functionality completely compatible Bioconductor’s alabaster framework hence allows also read whole, parts data directly using alabaster’s readObject() method. full MsExperiment restored importing full directory (.e. providing path directory containing full export function’s path parameter). Alternatively, providing path one MS object’s components, possible read specific parts data. read sample annotation information DataFrame sample_data subfolder:","code":"d <- file.path(tempdir(), \"ms_experiment_export_alabaster\") saveMsObject(mse, AlabasterParam(path = d)) dir(d, recursive = TRUE) ##  [1] \"experiment_files/OBJECT\"                        ##  [2] \"experiment_files/x/list_contents.json.gz\"       ##  [3] \"experiment_files/x/OBJECT\"                      ##  [4] \"metadata/list_contents.json.gz\"                 ##  [5] \"metadata/OBJECT\"                                ##  [6] \"OBJECT\"                                         ##  [7] \"other_data/list_contents.json.gz\"               ##  [8] \"other_data/OBJECT\"                              ##  [9] \"sample_data_links_mcols/basic_columns.h5\"       ## [10] \"sample_data_links_mcols/OBJECT\"                 ## [11] \"sample_data_links/list_contents.json.gz\"        ## [12] \"sample_data_links/OBJECT\"                       ## [13] \"sample_data_links/other_contents/0/array.h5\"    ## [14] \"sample_data_links/other_contents/0/OBJECT\"      ## [15] \"sample_data/basic_columns.h5\"                   ## [16] \"sample_data/OBJECT\"                             ## [17] \"spectra/backend/OBJECT\"                         ## [18] \"spectra/backend/peaks_variables/contents.h5\"    ## [19] \"spectra/backend/peaks_variables/OBJECT\"         ## [20] \"spectra/backend/spectra_data/basic_columns.h5\"  ## [21] \"spectra/backend/spectra_data/OBJECT\"            ## [22] \"spectra/metadata/list_contents.json.gz\"         ## [23] \"spectra/metadata/OBJECT\"                        ## [24] \"spectra/OBJECT\"                                 ## [25] \"spectra/processing_chunk_size/contents.h5\"      ## [26] \"spectra/processing_chunk_size/OBJECT\"           ## [27] \"spectra/processing_queue_variables/contents.h5\" ## [28] \"spectra/processing_queue_variables/OBJECT\"      ## [29] \"spectra/processing/contents.h5\"                 ## [30] \"spectra/processing/OBJECT\"                      ## [31] \"spectra/spectra_processing_queue.json\" mse_in <- readMsObject(MsExperiment(), AlabasterParam(d)) mse_in ## Object of class MsExperiment  ##  Spectra: MS1 (5626) MS2 (10975)  ##  Experiment data: 2 sample(s) ##  Sample data links: ##   - spectra: 2 sample(s) to 16601 element(s). s <- readMsObject(Spectra(), AlabasterParam(file.path(d, \"spectra\"))) s ## MSn data (Spectra) with 16601 spectra in a MsBackendMzR backend: ##         msLevel     rtime scanIndex ##       <integer> <numeric> <integer> ## 1             1     0.231         1 ## 2             1     0.351         2 ## 3             1     0.471         3 ## 4             1     0.591         4 ## 5             1     0.711         5 ## ...         ...       ...       ... ## 16597         2   899.527      8995 ## 16598         2   899.624      8996 ## 16599         2   899.721      8997 ## 16600         2   899.818      8998 ## 16601         2   899.915      8999 ##  ... 33 more variables/columns. ##  ## file(s): ## PestMix1_DDA.mzML ## PestMix1_SWATH.mzML mse_in <- readObject(path = d) mse_in ## Object of class MsExperiment  ##  Spectra: MS1 (5626) MS2 (10975)  ##  Experiment data: 2 sample(s) ##  Sample data links: ##   - spectra: 2 sample(s) to 16601 element(s). readObject(path = file.path(d, \"sample_data\")) ## DataFrame with 2 rows and 3 columns ##            name        mode spectraOrigin ##     <character> <character>   <character> ## 1 Pestmix1 D...         DDA /__w/_temp... ## 2 Pestmix SW...       SWATH /__w/_temp..."},{"path":"https://rformassspectrometry.github.io/MsIO/articles/MsIO.html","id":"loading-data-from-metabolights","dir":"Articles","previous_headings":"","what":"Loading data from MetaboLights","title":"Storage Modes of MS Data Objects","text":"MetaboLights database contains large collection metabolomics datasets. creating MetaboLightsParam object, can load data database providing desired MetaboLights ID. dataset loaded MsExperiment object. object sampleData slot contains sample information combined selected assay’s information. One MsExperiment object can created one assay. spectra information MsExperiment object populated derived files available database. details spectral data handled, refer vignette , demonstrate load small dataset ID: MTBLS575. also use assayName parameter specify assay want load, filePattern parameter indicate assay files load. recommended adjust settings according specific study. Next, examine sampleData() mse object: observe large number columns present. Several parameters available readMsObject() function simplify sampleData. Setting keepOntology = FALSE remove columns related ontology terms, keepProtocol = FALSE remove columns related protocol information. simplify = TRUE option (default) removes NAs merges columns different names duplicate contents. can set simplify = FALSE retain columns. , load object , time simplifying sampleData: Now, examine sampleData information: can see much simpler.","code":"library(MsExperiment()) # Prepare parameter param <- MetaboLightsParam(mtblsId = \"MTBLS575\",                             assayName = paste0(\"a_MTBLS575_POS_INFEST_CTRL_\",                                               \"mass_spectrometry.txt\"),                             filePattern = \"cdf$\")  # Load MsExperiment object mse <- readMsObject(MsExperiment(), param) sampleData(mse) ## DataFrame with 6 rows and 30 columns ##     Sample_Name Protocol_REF Protocol_REF.1 ##     <character>  <character>    <character> ## 1     PB130_co1   Extraction  Chromatogr... ## 2     PB130_co2   Extraction  Chromatogr... ## 3     PB130_co3   Extraction  Chromatogr... ## 4 PB130_sesa...   Extraction  Chromatogr... ## 5 PB130_sesa...   Extraction  Chromatogr... ## 6 PB130_sesa...   Extraction  Chromatogr... ##   Parameter_Value[Chromatography_Instrument] Parameter_Value[Column_model] ##                                  <character>                   <character> ## 1                              Waters ACQ...                 ACQUITY UP... ## 2                              Waters ACQ...                 ACQUITY UP... ## 3                              Waters ACQ...                 ACQUITY UP... ## 4                              Waters ACQ...                 ACQUITY UP... ## 5                              Waters ACQ...                 ACQUITY UP... ## 6                              Waters ACQ...                 ACQUITY UP... ##   Parameter_Value[Column_type] Protocol_REF.2 Parameter_Value[Scan_polarity] ##                    <character>    <character>                    <character> ## 1                reverse ph...  Mass spect...                       positive ## 2                reverse ph...  Mass spect...                       positive ## 3                reverse ph...  Mass spect...                       positive ## 4                reverse ph...  Mass spect...                       positive ## 5                reverse ph...  Mass spect...                       positive ## 6                reverse ph...  Mass spect...                       positive ##   Parameter_Value[Instrument] Parameter_Value[Ion_source] Term_Source_REF ##                   <character>                 <character>     <character> ## 1               Waters SYN...               electrospr...              MS ## 2               Waters SYN...               electrospr...              MS ## 3               Waters SYN...               electrospr...              MS ## 4               Waters SYN...               electrospr...              MS ## 5               Waters SYN...               electrospr...              MS ## 6               Waters SYN...               electrospr...              MS ##   Term_Accession_Number Parameter_Value[Mass_analyzer] Raw_Spectral_Data_File ##             <character>                    <character>            <character> ## 1         http://pur...                  quadrupole...          FILES/PB13... ## 2         http://pur...                  quadrupole...          FILES/PB13... ## 3         http://pur...                  quadrupole...          FILES/PB13... ## 4         http://pur...                  quadrupole...          FILES/PB13... ## 5         http://pur...                  quadrupole...          FILES/PB13... ## 6         http://pur...                  quadrupole...          FILES/PB13... ##   Protocol_REF.3 Protocol_REF.4 Metabolite_Assignment_File Source_Name ##      <character>    <character>                <character> <character> ## 1  Data trans...  Metabolite...              m_MTBLS575...    MBG-CSIC ## 2  Data trans...  Metabolite...              m_MTBLS575...    MBG-CSIC ## 3  Data trans...  Metabolite...              m_MTBLS575...    MBG-CSIC ## 4  Data trans...  Metabolite...              m_MTBLS575...    MBG-CSIC ## 5  Data trans...  Metabolite...              m_MTBLS575...    MBG-CSIC ## 6  Data trans...  Metabolite...              m_MTBLS575...    MBG-CSIC ##   Characteristics[Organism] Term_Source_REF.1 Term_Accession_Number.1 ##                 <character>       <character>             <character> ## 1                  Zea mays         NCBITAXON           http://pur... ## 2                  Zea mays         NCBITAXON           http://pur... ## 3                  Zea mays         NCBITAXON           http://pur... ## 4                  Zea mays         NCBITAXON           http://pur... ## 5                  Zea mays         NCBITAXON           http://pur... ## 6                  Zea mays         NCBITAXON           http://pur... ##   Characteristics[Variant] Term_Source_REF.2 Term_Accession_Number.2 ##                <character>       <character>             <character> ## 1            Zea mays s...               EFO           http://pur... ## 2            Zea mays s...               EFO           http://pur... ## 3            Zea mays s...               EFO           http://pur... ## 4            Zea mays s...               EFO           http://pur... ## 5            Zea mays s...               EFO           http://pur... ## 6            Zea mays s...               EFO           http://pur... ##   Characteristics[Organism_part] Term_Accession_Number.3 Protocol_REF.5 ##                      <character>             <character>    <character> ## 1                  stem inter...           http://pur...  Sample col... ## 2                  stem inter...           http://pur...  Sample col... ## 3                  stem inter...           http://pur...  Sample col... ## 4                  stem inter...           http://pur...  Sample col... ## 5                  stem inter...           http://pur...  Sample col... ## 6                  stem inter...           http://pur...  Sample col... ##   Factor_Value[Genotype] Factor_Value[Infestation] ##              <character>               <character> ## 1                  PB130                   Control ## 2                  PB130                   Control ## 3                  PB130                   Control ## 4                  PB130             Sesamia in... ## 5                  PB130             Sesamia in... ## 6                  PB130             Sesamia in... ##   Factor_Value[Biological_Replicate] ##                            <integer> ## 1                                  1 ## 2                                  2 ## 3                                  3 ## 4                                  1 ## 5                                  2 ## 6                                  3 mse <- readMsObject(MsExperiment(), param, keepOntology = FALSE,                      keepProtocol = FALSE, simplify = TRUE) sampleData(mse) ## DataFrame with 6 rows and 10 columns ##     Sample_Name Raw_Spectral_Data_File Metabolite_Assignment_File Source_Name ##     <character>            <character>                <character> <character> ## 1     PB130_co1          FILES/PB13...              m_MTBLS575...    MBG-CSIC ## 2     PB130_co2          FILES/PB13...              m_MTBLS575...    MBG-CSIC ## 3     PB130_co3          FILES/PB13...              m_MTBLS575...    MBG-CSIC ## 4 PB130_sesa...          FILES/PB13...              m_MTBLS575...    MBG-CSIC ## 5 PB130_sesa...          FILES/PB13...              m_MTBLS575...    MBG-CSIC ## 6 PB130_sesa...          FILES/PB13...              m_MTBLS575...    MBG-CSIC ##   Characteristics[Organism] Characteristics[Variant] ##                 <character>              <character> ## 1                  Zea mays            Zea mays s... ## 2                  Zea mays            Zea mays s... ## 3                  Zea mays            Zea mays s... ## 4                  Zea mays            Zea mays s... ## 5                  Zea mays            Zea mays s... ## 6                  Zea mays            Zea mays s... ##   Characteristics[Organism_part] Factor_Value[Genotype] ##                      <character>            <character> ## 1                  stem inter...                  PB130 ## 2                  stem inter...                  PB130 ## 3                  stem inter...                  PB130 ## 4                  stem inter...                  PB130 ## 5                  stem inter...                  PB130 ## 6                  stem inter...                  PB130 ##   Factor_Value[Infestation] Factor_Value[Biological_Replicate] ##                 <character>                          <integer> ## 1                   Control                                  1 ## 2                   Control                                  2 ## 3                   Control                                  3 ## 4             Sesamia in...                                  1 ## 5             Sesamia in...                                  2 ## 6             Sesamia in...                                  3"},{"path":"https://rformassspectrometry.github.io/MsIO/articles/MsIO.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Storage Modes of MS Data Objects","text":"","code":"sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ## [1] Spectra_1.15.8      BiocParallel_1.39.0 S4Vectors_0.43.2    ## [4] BiocGenerics_0.51.1 MsExperiment_1.7.0  ProtGenerics_1.37.1 ## [7] MsIO_0.0.5          BiocStyle_2.33.1    ##  ## loaded via a namespace (and not attached): ##  [1] DBI_1.2.3                    rlang_1.1.4                  ##  [3] magrittr_2.0.3               clue_0.3-65                  ##  [5] matrixStats_1.4.1            MsBackendMetaboLights_0.99.0 ##  [7] compiler_4.4.1               RSQLite_2.3.7                ##  [9] systemfonts_1.1.0            vctrs_0.6.5                  ## [11] reshape2_1.4.4               stringr_1.5.1                ## [13] pkgconfig_2.0.3              MetaboCoreUtils_1.13.0       ## [15] crayon_1.5.3                 fastmap_1.2.0                ## [17] dbplyr_2.5.0                 XVector_0.45.0               ## [19] utf8_1.2.4                   rmarkdown_2.28               ## [21] UCSC.utils_1.1.0             ragg_1.3.3                   ## [23] purrr_1.0.2                  bit_4.0.5                    ## [25] xfun_0.47                    MultiAssayExperiment_1.31.5  ## [27] zlibbioc_1.51.1              cachem_1.1.0                 ## [29] GenomeInfoDb_1.41.1          jsonlite_1.8.8               ## [31] blob_1.2.4                   rhdf5filters_1.17.0          ## [33] DelayedArray_0.31.11         Rhdf5lib_1.27.0              ## [35] parallel_4.4.1               cluster_2.1.6                ## [37] R6_2.5.1                     bslib_0.8.0                  ## [39] stringi_1.8.4                GenomicRanges_1.57.1         ## [41] jquerylib_0.1.4              Rcpp_1.0.13                  ## [43] bookdown_0.40                SummarizedExperiment_1.35.1  ## [45] knitr_1.48                   IRanges_2.39.2               ## [47] Matrix_1.7-0                 igraph_2.0.3                 ## [49] tidyselect_1.2.1             abind_1.4-8                  ## [51] yaml_2.3.10                  codetools_0.2-20             ## [53] curl_5.2.2                   lattice_0.22-6               ## [55] tibble_3.2.1                 plyr_1.8.9                   ## [57] Biobase_2.65.1               withr_3.0.1                  ## [59] evaluate_1.0.0               desc_1.4.3                   ## [61] BiocFileCache_2.13.0         alabaster.schemas_1.5.0      ## [63] pillar_1.9.0                 BiocManager_1.30.25          ## [65] filelock_1.0.3               MatrixGenerics_1.17.0        ## [67] ncdf4_1.23                   generics_0.1.3               ## [69] alabaster.base_1.5.8         glue_1.7.0                   ## [71] alabaster.matrix_1.5.9       lazyeval_0.2.2               ## [73] tools_4.4.1                  QFeatures_1.15.2             ## [75] mzR_2.39.0                   fs_1.6.4                     ## [77] rhdf5_2.49.0                 grid_4.4.1                   ## [79] tidyr_1.3.1                  MsCoreUtils_1.17.1           ## [81] GenomeInfoDbData_1.2.12      HDF5Array_1.33.6             ## [83] cli_3.6.3                    textshaping_0.4.0            ## [85] fansi_1.0.6                  S4Arrays_1.5.7               ## [87] dplyr_1.1.4                  AnnotationFilter_1.29.0      ## [89] sass_0.4.9                   digest_0.6.37                ## [91] SparseArray_1.5.36           htmlwidgets_1.6.4            ## [93] memoise_2.0.1                htmltools_0.5.8.1            ## [95] pkgdown_2.1.1.9000           lifecycle_1.0.4              ## [97] httr_1.4.7                   bit64_4.0.5                  ## [99] MASS_7.3-61"},{"path":"https://rformassspectrometry.github.io/MsIO/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johannes Rainer. Author, maintainer. Philippine Louail. Author. Laurent Gatto. Contributor.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rainer J, Louail P (2024). MsIO: Serializing restoring/importing mass spectrometry data objects. R package version 0.0.5, https://github.com/RforMassSpectrometry/MsIO.","code":"@Manual{,   title = {MsIO: Serializing and restoring/importing mass spectrometry data objects},   author = {Johannes Rainer and Philippine Louail},   year = {2024},   note = {R package version 0.0.5},   url = {https://github.com/RforMassSpectrometry/MsIO}, }"},{"path":"https://rformassspectrometry.github.io/MsIO/index.html","id":"msio","dir":"","previous_headings":"","what":"Serializing and restoring/importing mass spectrometry data objects","title":"Serializing and restoring/importing mass spectrometry data objects","text":"MsIO package supports serializing restoring/importing mass spectrometry (MS) data objects language agnostic file formats. Ultimately, package aims enabling easier exchange data results different software tools programming languages. R provides save() load() functions possibility serialize (later import) variables objects disk, data stored R-specific binary format easily readable programming languages software tools. Exchange data results programming languages tools however important avoid need re-implement methodology algorithms make existing software create powerful analysis workflow. MsIO package defines generic export/import methods along parameter objects allow select configure file format(s). possible, integrated approaches Bioconductor alabaster.base package. particular MsIO integrate alabaster.base providing saveObject() methods exporting/importing MS specific data objects JSON file formats, , top , supporting serializing MS data objects additional different formats thus supporting specific file formats defined software.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/index.html","id":"currently-supported-and-implemented-storage-representations","dir":"","previous_headings":"","what":"Currently supported and implemented storage representations","title":"Serializing and restoring/importing mass spectrometry data objects","text":"currently available export/data storage formats along respective parameter object configure export/import listed : Export import plain text files. objects data stored simple tabulator delimited text files. Export/import can configured PlainTextParam parameter class supported present MsBackendMzR Spectra objects Spectra package, MsExperiment objects MsExperiment package XcmsExperiment objects xcms package.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Serializing and restoring/importing mass spectrometry data objects","text":"Contributions highly welcome follow contribution guidelines. Also, please check coding style guidelines RforMassSpectrometry vignette.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Serializing and restoring/importing mass spectrometry data objects","text":"MsIO code provided permissive Artistic 2.0 license. documentation, including manual pages vignettes, distributed CC -SA license.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/AlabasterParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Store MS data objects using the alabaster framework — AlabasterParam","title":"Store MS data objects using the alabaster framework — AlabasterParam","text":"alabaster framework provides methodology save R objects -disk representations/ storage modes programming language independent (contrast e.g. R's RDS files). using standard file formats JSON HDF5, alabaster ensures data can also read imported programming languages Python Javascript. improves interoperability application ecosystems. alabaster package defines saveObject() readObject() methods. Implementations methods available following classes hence allowing use saveObject() readObject() directly objects: MsBackendMzR, defined Spectra package. Spectra, defined Spectra package. addition, MsIO package defines AlabasterParam can used write read MS objects using saveMsObject() readMsObject() methods. allows additional configurations customizations export import process. thus example possible specify path original MS data files -disk MS representations MsBackendMzR enables import stored object even either object original MS data files moved different directory file system. Importantly, possible save one object one directory. overwrite existing stored object folder, folder deleted beforehand. Details properties alabaster-based storage modes various supported MS data objects listed following sections.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/AlabasterParam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store MS data objects using the alabaster framework — AlabasterParam","text":"","code":"AlabasterParam(path = tempdir())  # S4 method for class 'MsBackendMzR' saveObject(x, path, ...)  # S4 method for class 'MsBackendMzR,AlabasterParam' saveMsObject(object, param)  # S4 method for class 'MsBackendMzR,AlabasterParam' readMsObject(object, param, spectraPath = character())  # S4 method for class 'MsExperiment' saveObject(x, path, ...)  # S4 method for class 'MsExperiment,AlabasterParam' saveMsObject(object, param)  # S4 method for class 'MsExperiment,AlabasterParam' readMsObject(object, param, ...)  # S4 method for class 'Spectra' saveObject(x, path, ...)  # S4 method for class 'Spectra,AlabasterParam' saveMsObject(object, param)  # S4 method for class 'Spectra,AlabasterParam' readMsObject(object, param, ...)  # S4 method for class 'XcmsExperiment' saveObject(x, path, ...)  # S4 method for class 'XcmsExperiment,AlabasterParam' saveMsObject(object, param)  # S4 method for class 'XcmsExperiment,AlabasterParam' readMsObject(object, param, ...)"},{"path":"https://rformassspectrometry.github.io/MsIO/reference/AlabasterParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store MS data objects using the alabaster framework — AlabasterParam","text":"path character(1) name directory MS data object saved restored. Importantly, path point new folder, .e. directory already exist. x MS data object export. Can one supported classes listed . ... optional additional parameters passed downstream functions, example spectraPath described . object saveMsObject(): MS data object save, readMsObject(): MS data object returned param object defining (eventually configuring) file format file name directory /data object exported/imported. spectraPath readMsObject(): character(1) optionally allowing define (absolute) path spectra files (data storage files) can found. parameter used MsBackendMzR (see descriptions ) can passed ... also readMsObject() functions classes (Spectra, MsExperiment etc).","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/AlabasterParam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store MS data objects using the alabaster framework — AlabasterParam","text":"AlabasterParam(): instance AlabasterParam class. readObject() exported object specified path (depending type object defined OBJECT file path. readMsObject() exported data object, defined function's first parameter, specified path. saveObject() saveMsObject() return anything.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/AlabasterParam.html","id":"on-disk-storage-for-msbackendmzr-objects","dir":"Reference","previous_headings":"","what":"On-disk storage for MsBackendMzR objects","title":"Store MS data objects using the alabaster framework — AlabasterParam","text":"MsBackendMzR objects can exported imported using saveMsObject() readMsObject() functions alabaster-based storage modes using AlabasterParam parameter object. Alternatively alabaster's saveObject() readObject() can used. parameter spectraPath allows define alternative path original data files (case moved). parameter can passed additional parameter readObject() well readMsObject() methods. format folder contents follows alabaster format: file OBJECT (JSON format) defines type object stored directory object's data, MsBackendMzR, stored sub-folders peaks_variables (character names peaks variables object) spectra_data (metadata spectra). sub-folder contains also OBJECT file defining object's type additional file (HDF5 format) containing data. See examples details.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/AlabasterParam.html","id":"on-disk-storage-for-spectra-objects","dir":"Reference","previous_headings":"","what":"On-disk storage for Spectra objects","title":"Store MS data objects using the alabaster framework — AlabasterParam","text":"Spectra objects can exported/imported using saveMsObject() readMsObject() AlabasterParam, using saveObject() readObject() functions. read functions allow pass additional parameters (spectraPath) import function Spectra's backend. content folder stored Spectra data contains OBJECT file defining type object stored directory spectra_processing_queue.json file contains processing queue Spectra objects. slots object saved alabaster format respective sub-directories: backend MsBackend (see also MsBackendMzR ), metadata metadata slot, processing processing log, processing_chunk_size size chunk-wise processing processing_queue_variables spectra/peaks variables needed processing queue.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/AlabasterParam.html","id":"on-disk-storage-for-msexperiment-objects","dir":"Reference","previous_headings":"","what":"On-disk storage for MsExperiment objects","title":"Store MS data objects using the alabaster framework — AlabasterParam","text":"MsExperiment container various (different) MS data objects related experiment. flexible object can, must contain actual MS data form e.g. Spectra object. alabaster-based disk storage MsExperiment, object's slots gets exported separately subfolder within object's directory (defined parameter path). export individual slots, respective saveObject() method used. Similar objects listed , MsExperiment can stored using either saveObject() saveMsObject (AlabasterParam) restored using readObject() readMsObject() (MsExperiment() passed first parameter AlabasterParam second). read functions support passing additional parameters import function(s) object's MS data object(s), spectraPath parameter described .... content folder stored MsExperiment data contains file OBJECT (JSON format, type class defined \"ms_experiment\") subfolders various slots, saved disk using data type-specific saveObject() function: @sampleData: DataFrame stored folder named sample_data. @sampleDataLinks: List stored folder named sample_data_links, metadata columns DataFrame (.e. mcols() List) folder named sample_data_links_mcols. @spectra: NULL, Spectraobject stored folder name *spectra* (usingsaveObject()ofSpectraobjects described ). requires *alabaster.se* package installed. value @spectraslot isNULL` directory spectra created. @experimentFiles: MsExperimentFiles object saved using saveObject() folder named experiment_files. MsExperimentFiles saved named list character strings. @qdata: NULL, object slot (either QFeatures SummarizedExperiment) stored folder name qdata using saveObject() method respective object. value @qdata slot NULL folder qdata created. present, export QFeatures objects supported! @otherData: List data saved folder named other_data. @metadata: List data saved filder named metadata. Note data type assays imported (previously stored) SummarizedExperiment objects type ReloadedMatrix.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/AlabasterParam.html","id":"on-disk-storage-for-xcmsexperiment-objects","dir":"Reference","previous_headings":"","what":"On-disk storage for XcmsExperiment objects","title":"Store MS data objects using the alabaster framework — AlabasterParam","text":"XcmsExperiment objects extend MsExperiment object contain addition results preprocessing MS data using xcms package. objects can exported/imported formats used alabaster-based storage using saveObject() readObject() functions well using saveMsObject() readMsObject() AlabasterParam parameter object. methods, additional parameters can passed ... parameter (spectraData parameter import MsBackendMzR discussed ). storage directory contains files folders created export MsExperiment (see ) addition specific results xcms respective slots object: @chromPeaks: numeric matrix stored folder names chrom_peaks. @chromPeakData: data.frame first converted DataFrame stored folder chrom_peak_data (alabaster format DataFrame). @featureDefinitions: data.frame first converted DataFrame stored folder feature_definitions (also alabaster format DataFrame). @processHistory: list ProcessHistory objects stored JSON format file xcms_experiment_process_history.json.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MsIO/reference/AlabasterParam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Store MS data objects using the alabaster framework — AlabasterParam","text":"Johannes Rainer, Philippine Louail","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/AlabasterParam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store MS data objects using the alabaster framework — AlabasterParam","text":"","code":"######## ## Export and import a `MsBackendMzR` object: ####  library(Spectra) #> Loading required package: S4Vectors #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, table, tapply, #>     union, unique, unsplit, which.max, which.min #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: BiocParallel #> Loading required package: ProtGenerics #>  #> Attaching package: ‘ProtGenerics’ #> The following object is masked from ‘package:stats’: #>  #>     smooth library(msdata) fl <- system.file(\"TripleTOF-SWATH\", \"PestMix1_DDA.mzML\", package = \"msdata\") be <- backendInitialize(MsBackendMzR(), fl) be #> MsBackendMzR with 7602 spectra #>        msLevel     rtime scanIndex #>      <integer> <numeric> <integer> #> 1            1     0.231         1 #> 2            1     0.351         2 #> 3            1     0.471         3 #> 4            1     0.591         4 #> 5            1     0.711         5 #> ...        ...       ...       ... #> 7598         1   899.491      7598 #> 7599         1   899.613      7599 #> 7600         1   899.747      7600 #> 7601         1   899.872      7601 #> 7602         1   899.993      7602 #>  ... 33 more variables/columns. #>  #> file(s): #> PestMix1_DDA.mzML  ## Export the object to a temporary directory using the alabaster framework; ## the equivalent command using the parameter object would be ## `saveMsObject(be, AlabasterParam(d))`. d <- file.path(tempdir(), \"ms_backend_mzr_example\") saveObject(be, d)  ## List the content of the folder dir(d, recursive = TRUE) #> [1] \"OBJECT\"                        \"peaks_variables/OBJECT\"        #> [3] \"peaks_variables/contents.h5\"   \"spectra_data/OBJECT\"           #> [5] \"spectra_data/basic_columns.h5\"  ## The data can be imported again using alabaster's readObject() function be_in <- readObject(d) be_in #> MsBackendMzR with 7602 spectra #>        msLevel     rtime scanIndex #>      <integer> <numeric> <integer> #> 1            1     0.231         1 #> 2            1     0.351         2 #> 3            1     0.471         3 #> 4            1     0.591         4 #> 5            1     0.711         5 #> ...        ...       ...       ... #> 7598         1   899.491      7598 #> 7599         1   899.613      7599 #> 7600         1   899.747      7600 #> 7601         1   899.872      7601 #> 7602         1   899.993      7602 #>  ... 33 more variables/columns. #>  #> file(s): #> PestMix1_DDA.mzML  ## Alternatively, the data could be restored also using be_in <- readMsObject(MsBackendMzR(), AlabasterParam(d))  all.equal(mz(be), mz(be_in)) #> [1] TRUE   ######## ## Export and import of `Spectra` objects: ####  ## Create a `Spectra` object with a `MsBackendMzR` backend. s <- Spectra(fl)  ## Define the folder to which to export and export the object d <- file.path(tempdir(), \"spectra_example\") saveMsObject(s, AlabasterParam(d))  ## List the content of the directory dir(d, recursive = TRUE) #>  [1] \"OBJECT\"                                 #>  [2] \"backend/OBJECT\"                         #>  [3] \"backend/peaks_variables/OBJECT\"         #>  [4] \"backend/peaks_variables/contents.h5\"    #>  [5] \"backend/spectra_data/OBJECT\"            #>  [6] \"backend/spectra_data/basic_columns.h5\"  #>  [7] \"metadata/OBJECT\"                        #>  [8] \"metadata/list_contents.json.gz\"         #>  [9] \"processing/OBJECT\"                      #> [10] \"processing/contents.h5\"                 #> [11] \"processing_chunk_size/OBJECT\"           #> [12] \"processing_chunk_size/contents.h5\"      #> [13] \"processing_queue_variables/OBJECT\"      #> [14] \"processing_queue_variables/contents.h5\" #> [15] \"spectra_processing_queue.json\"           ## Restore the `Spectra` object again s_in <- readMsObject(Spectra(), AlabasterParam(d)) s_in #> MSn data (Spectra) with 7602 spectra in a MsBackendMzR backend: #>        msLevel     rtime scanIndex #>      <integer> <numeric> <integer> #> 1            1     0.231         1 #> 2            1     0.351         2 #> 3            1     0.471         3 #> 4            1     0.591         4 #> 5            1     0.711         5 #> ...        ...       ...       ... #> 7598         1   899.491      7598 #> 7599         1   899.613      7599 #> 7600         1   899.747      7600 #> 7601         1   899.872      7601 #> 7602         1   899.993      7602 #>  ... 33 more variables/columns. #>  #> file(s): #> PestMix1_DDA.mzML  ## Alternatively, it would also be possible to just import the ## `MsBackendMzR` of the `Spectra`: be_in <- readMsObject(MsBackendMzR(), AlabasterParam(file.path(d, \"backend\"))) be_in #> MsBackendMzR with 7602 spectra #>        msLevel     rtime scanIndex #>      <integer> <numeric> <integer> #> 1            1     0.231         1 #> 2            1     0.351         2 #> 3            1     0.471         3 #> 4            1     0.591         4 #> 5            1     0.711         5 #> ...        ...       ...       ... #> 7598         1   899.491      7598 #> 7599         1   899.613      7599 #> 7600         1   899.747      7600 #> 7601         1   899.872      7601 #> 7602         1   899.993      7602 #>  ... 33 more variables/columns. #>  #> file(s): #> PestMix1_DDA.mzML   ######## ## Export and import of `MsExperiment` objects: ####  library(MsExperiment)  ## Create a new `MsExperiment` with sample data and our previously defined ## `Spectra` as its MS data m <- MsExperiment(     sampleData = data.frame(name = c(\"a\", \"b\"), index = 1:2),     spectra = s) m #> Object of class MsExperiment  #>  Spectra: MS1 (4627) MS2 (2975)  #>  Experiment data: 2 sample(s)  d <- file.path(tempdir(), \"ms_experiment_example\") saveObject(m, d)  ## List directory content dir(d) #> [1] \"OBJECT\"                  \"experiment_files\"        #> [3] \"metadata\"                \"other_data\"              #> [5] \"sample_data\"             \"sample_data_links\"       #> [7] \"sample_data_links_mcols\" \"spectra\"                  ## Restore the stored object m_in <- readObject(d)  m_in #> Object of class MsExperiment  #>  Spectra: MS1 (4627) MS2 (2975)  #>  Experiment data: 2 sample(s)   ######## ## Export and import of `XcmsExperiment` objects: ####  ## `XcmsExperiment` objects extend `MsExperiment` to represent all ## data of an MS experiment and contain in addition the results ## of the preprocessing of the data with the *xcms* package. Below ## we load the *xcms* package and load an example result object from that ## package. library(xcms) #>  #> This is xcms version 4.3.3  #>  #> Attaching package: ‘xcms’ #> The following object is masked from ‘package:Spectra’: #>  #>     ppm #> The following object is masked from ‘package:stats’: #>  #>     sigma x <- loadXcmsData() x #> Object of class XcmsExperiment  #>  Spectra: MS1 (8688)  #>  Experiment data: 8 sample(s) #>  Sample data links: #>   - spectra: 8 sample(s) to 8688 element(s). #>  xcms results: #>   - chromatographic peaks: 3651 in MS level(s): 1  #>   - adjusted retention times: mean absolute difference 6.46 seconds #>   - correspondence results: 351 features in MS level(s): 1   ## Store this result object to a folder d <- file.path(tempdir(), \"xcms_experiment_example\") saveMsObject(x, AlabasterParam(d))  dir(d) #>  [1] \"OBJECT\"                               #>  [2] \"chrom_peak_data\"                      #>  [3] \"chrom_peaks\"                          #>  [4] \"experiment_files\"                     #>  [5] \"feature_definitions\"                  #>  [6] \"metadata\"                             #>  [7] \"other_data\"                           #>  [8] \"sample_data\"                          #>  [9] \"sample_data_links\"                    #> [10] \"sample_data_links_mcols\"              #> [11] \"spectra\"                              #> [12] \"xcms_experiment_process_history.json\"  ## Restore the data; eventually needed additional parameters, such as ## `spectraPath` to restore a `MsBackendMzR` if the original data files ## have been moved, could be passed with the `...` parameter of ## `readMsExperiment()`. x_in <- readMsObject(XcmsExperiment(), AlabasterParam(d)) x_in #> Object of class XcmsExperiment  #>  Spectra: MS1 (8688)  #>  Experiment data: 8 sample(s) #>  Sample data links: #>   - spectra: 8 sample(s) to 8688 element(s). #>  xcms results: #>   - chromatographic peaks: 3651 in MS level(s): 1  #>   - adjusted retention times: mean absolute difference 6.46 seconds #>   - correspondence results: 351 features in MS level(s): 1"},{"path":"https://rformassspectrometry.github.io/MsIO/reference/MetaboLightsParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Load content from a MetaboLights study — MetaboLightsParam","title":"Load content from a MetaboLights study — MetaboLightsParam","text":"MetaboLightsParam class associated readMsObject() method allow users load MsExperiment object study MetaboLights database (https://www.ebi.ac.uk/metabolights/index) providing unique study mtblsId. function particularly useful importing metabolomics data MsExperiment object analysis R environment. important note present possible read (import) data MetaboLights, save data MetaboLights. study contains multiple assays, user prompted select assay load. resulting MsExperiment object include sampleData slot populated data extracted selected assay. Users can define filter sampleData table specifying parameters. keepOntology parameter set TRUE default, meaning ontology-related columns retained. set FALSE, removed. ontology columns kept, column names may duplicated therefore numbered. order columns important, reflects assay sample information available MetaboLights. keepProtocol parameter also set TRUE default, meaning columns related protocols kept. set FALSE, removed. simplify parameter (default simplify = TRUE) allows define whether duplicated columns columns containing missing values removed. case duplicated content, first occurring column retained. filtering can performed using filePattern parameter MetaboLightsParam object. default parameter \"mzML$|CDF$|cdf$|mzXML$\", corresponds supported raw data file types.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/MetaboLightsParam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load content from a MetaboLights study — MetaboLightsParam","text":"","code":"MetaboLightsParam(   mtblsId = character(),   assayName = character(),   filePattern = \"mzML$|CDF$|cdf$|mzXML$\" )  # S4 method for class 'MsExperiment,MetaboLightsParam' readMsObject(   object,   param,   keepOntology = TRUE,   keepProtocol = TRUE,   simplify = TRUE,   ... )"},{"path":"https://rformassspectrometry.github.io/MsIO/reference/MetaboLightsParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load content from a MetaboLights study — MetaboLightsParam","text":"mtblsId character(1) MetaboLights study ID, start \"MTBL\". identifier uniquely specifies study within MetaboLights database. assayName character(1) name assay load. study contains multiple assays parameter specified, user prompted select assay load. filePattern character(1) regular expression pattern filter raw data files associated selected assay. default value \"mzML$|CDF$|cdf$|mzXML$\", corresponding supported raw data file types. object saveMsObject(): MS data object save, readMsObject(): MS data object returned param object defining (eventually configuring) file format file name directory /data object exported/imported. keepOntology logical(1) Whether keep columns related ontology sampleData parameter. Default TRUE. keepProtocol logical(1) Whether keep columns related protocols information sampleData parameter. Default TRUE. simplify logical(1) Whether simplify sampleData table removing columns filled NAs duplicated content. Default TRUE. ... additional optional arguments. See documentation respective method information.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/MetaboLightsParam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load content from a MetaboLights study — MetaboLightsParam","text":"MsExperiment object sampleData parameter populated using MetaboLights sample assay information. spectra data represented MsBackendMetabolights object, generated raw data files associated selected assay specified MetaboLights ID (mtblsId).","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MsIO/reference/MetaboLightsParam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load content from a MetaboLights study — MetaboLightsParam","text":"Philippine Louail","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/MetaboLightsParam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load content from a MetaboLights study — MetaboLightsParam","text":"","code":"library(MsExperiment) # Load a study with the mtblsId \"MTBLS39\" and selecting specific file pattern # as well as removing ontology and protocol information in the metadata. param <- MetaboLightsParam(mtblsId = \"MTBLS39\", filePattern = \"63A.cdf\") ms_experiment <- readMsObject(MsExperiment(), param , keepOntology = FALSE,                               keepProtocol = FALSE) #> Only one assay file found:a_MTBLS39_the_plasticity_of_the_grapevine_berry_transcriptome_metabolite_profiling_mass_spectrometry.txt #> Used data files from the assay's column \"Raw Spectral Data File\" since none were available in column \"Derived Spectral Data File\"."},{"path":"https://rformassspectrometry.github.io/MsIO/reference/PlainTextParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Store contents of MS objects as plain text files — PlainTextParam","title":"Store contents of MS objects as plain text files — PlainTextParam","text":"saveMsObject() readMsObject() methods PlainTextParam option enable users save/load different type mass spectrometry (MS) object collections plain text files /specified folder. folder, defined path parameter, created storeResults() function. Writing data folder contains already exported data result error. data exported plain text files, possible tabulator delimited text files. Data exported using R's write.table() function, thus, text files also contain row names (first column) well column names (header). Strings text files quoted. information, particular content parameter classes within objects, stored JSON format instead. MS object currently supported import export parameter : MsBackendMzR object, defined (Spectra) package. Spectra object, defined (Spectra) package. MsExperiment object, defined (MsExperiment) package. XcmsExperiment object, defined (xcms) package. See respective section details formats exported files.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/PlainTextParam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store contents of MS objects as plain text files — PlainTextParam","text":"","code":"PlainTextParam(path = tempdir())  # S4 method for class 'MsBackendMzR,PlainTextParam' saveMsObject(object, param)  # S4 method for class 'MsBackendMzR,PlainTextParam' readMsObject(object, param, spectraPath = character())  # S4 method for class 'MsExperiment,PlainTextParam' saveMsObject(object, param)  # S4 method for class 'MsExperiment,PlainTextParam' readMsObject(object, param, ...)  # S4 method for class 'Spectra,PlainTextParam' saveMsObject(object, param)  # S4 method for class 'Spectra,PlainTextParam' readMsObject(object, param, ...)  # S4 method for class 'XcmsExperiment,PlainTextParam' saveMsObject(object, param)  # S4 method for class 'XcmsExperiment,PlainTextParam' readMsObject(object, param, ...)"},{"path":"https://rformassspectrometry.github.io/MsIO/reference/PlainTextParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store contents of MS objects as plain text files — PlainTextParam","text":"path PlainTextParam(): character(1), defining files going stored/ loaded . default path = tempdir(). object saveMsObject(): MS data object save, readMsObject(): MS data object returned param object defining (eventually configuring) file format file name directory /data object exported/imported. spectraPath readMsObject(): character(1) optionally allowing define (absolute) path spectra files (data storage files) can found. parameter used MsBackendMzR (see descriptions ) can passed ... also readMsObject() functions classes (Spectra, MsExperiment etc). ... Additional parameters passed internal functions. E.g. parameter spectraPath (see ).","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/PlainTextParam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store contents of MS objects as plain text files — PlainTextParam","text":"PlainTextParam(): PlainTextParam class. saveMsObject() return anything saves object collections different plain text files folder. readMsObject() method returns restored data instance class specified parameter object.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/PlainTextParam.html","id":"on-disk-storage-for-msbackendmzr-objects","dir":"Reference","previous_headings":"","what":"On-disk storage for MsBackendMzR objects","title":"Store contents of MS objects as plain text files — PlainTextParam","text":"MsBackendMzR objects, defined Spectra package, following file stored: backend's spectraData() stored tabular format text file named ms_backend_data.txt. row tab-delimited text file corresponds spectrum respective metadata columns.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/PlainTextParam.html","id":"on-disk-storage-for-spectra-objects","dir":"Reference","previous_headings":"","what":"On-disk storage for Spectra objects","title":"Store contents of MS objects as plain text files — PlainTextParam","text":"Spectra objects, defined Spectra package, files listed stored. parameter passed saveMsObject() method using ... parameter passed saveMsObject() call Spectra's backend. processingQueueVariables, processing, processingChunkSize(), backend class information object stored text file named spectra_slots.txt. slots stored name slot written, followed \"=\" content slot. processing queue Spectra object, ensuring spectra data modifications retained, stored json file named spectra_processing_queue.json. file written processing step separated line includes information parameters functions used step. Spectra's MS data (.e. backend) stored/exported using saveMsObject() method respective backend type. Currently backends saveMsObject() method implemented (see ) supported.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/PlainTextParam.html","id":"on-disk-storage-for-msexperiment-objects","dir":"Reference","previous_headings":"","what":"On-disk storage for MsExperiment objects","title":"Store contents of MS objects as plain text files — PlainTextParam","text":"MsExperiment objects, defined MsExperiment package, exported data related text files listed . parameter passed saveMsObject() ... passed saveMsObject() calls individual MS data object(s) within MsExperiment. Note present saveMsObject() PlainTextParam export full content MsExperiment, .e. slots @experimentFiles, @qdata, @otherData @metadata currently saved. sampleData() stored text file named ms_experiment_sample_data.txt. row file corresponds sample respective metadata columns. links sample data data within MsExperiment stored text files named ms_experiment_sample_data_links_....txt, \"...\" referring data slot samples linked. file contains mapping sample data elements specific data slot (e.g., Spectra). files tabulator delimited text files two columns integer values, first representing index sample objects sampleData(), second index assigned element respective object slot. table \"ms_experiment_element_metadata.txt\" contains metadata available mappings. MsExperiment contains Spectra object MS data, content exported folder using saveMsObject() call (see details exporting Spectra objects text files).","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/PlainTextParam.html","id":"on-disk-storage-for-xcmsexperiment-objects","dir":"Reference","previous_headings":"","what":"On-disk storage for XcmsExperiment objects","title":"Store contents of MS objects as plain text files — PlainTextParam","text":"XcmsExperiment objects, defined xcms package, exported data related text files listed . parameter passed saveMsObject() ... passed saveMsObject() calls individual MS data object(s) within XcmsExperiment. chromatographic peak information obtained chromPeaks() chromPeaksData() stored tabular format text files xcms_experiment_chrom_peaks.txt xcms_experiment_chrom_peak_data.txt, respectively. first file's rows represent single peaks respective metadata columns (numeric information). second file contains arbitrary additional information/metadata peak (row one chrom peak). featureDefinitions() stored text file named xcms_experiment_feature_definitions.txt. Additionally, second file named ms_experiment_feature_peak_index.txt generated connect features corresponding chromatographic peaks. row first file corresponds feature respective metadata columns. second file contains mapping features chromatographic peaks (one peak ID per row). processHistory() information object stored file named xcms_experiment_process_history.json JSON format. XcmsExperiment directly extends MsExperiment class, thus, MS data saved using call saveMsObject MsExperiment (see information).","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MsIO/reference/PlainTextParam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Store contents of MS objects as plain text files — PlainTextParam","text":"Philippine Louail","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/PlainTextParam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store contents of MS objects as plain text files — PlainTextParam","text":"","code":"## Export and import a `Spectra` object:  library(Spectra) library(msdata) fl <- system.file(\"TripleTOF-SWATH\", \"PestMix1_DDA.mzML\", package = \"msdata\") sps <- Spectra(fl)  ## Export the object to a temporary directory d <- file.path(tempdir(), \"spectra_example\") saveMsObject(sps, PlainTextParam(d))  ## List the exported plain text files: dir(d) #> [1] \"OBJECT\"                        \"backend\"                       #> [3] \"metadata\"                      \"ms_backend_data.txt\"           #> [5] \"processing\"                    \"processing_chunk_size\"         #> [7] \"processing_queue_variables\"    \"spectra_processing_queue.json\" #> [9] \"spectra_slots.txt\"              ## - ms_backend_data.txt contains the metadata for the MS backend used (a ##   'MsBackendMzR`. ## - spectra_slots.txt contains general information from the Spectra object.  ## Import the data again. By using `Spectra()` as first parameter we ensure ## the result is returned as a `Spectra` object. sps_in <- readMsObject(Spectra(), PlainTextParam(d)) #> backend MsBackendMzR sps_in #> MSn data (Spectra) with 7602 spectra in a MsBackendMzR backend: #>        msLevel     rtime scanIndex #>      <integer> <numeric> <integer> #> 1            1     0.231         1 #> 2            1     0.351         2 #> 3            1     0.471         3 #> 4            1     0.591         4 #> 5            1     0.711         5 #> ...        ...       ...       ... #> 7598         1   899.491      7598 #> 7599         1   899.613      7599 #> 7600         1   899.747      7600 #> 7601         1   899.872      7601 #> 7602         1   899.993      7602 #>  ... 27 more variables/columns. #>  #> file(s): #> PestMix1_DDA.mzML  ## Check that the data is the same all.equal(rtime(sps), rtime(sps_in)) #> [1] TRUE all.equal(intensity(sps), intensity(sps_in)) #> [1] TRUE  ## The data got exported *by module*, thus we could also load only a part of ## the exported data, such as just the `MsBackend` used by the `Spectra`: be <- readMsObject(MsBackendMzR(), PlainTextParam(d)) be #> MsBackendMzR with 7602 spectra #>        msLevel     rtime scanIndex #>      <integer> <numeric> <integer> #> 1            1     0.231         1 #> 2            1     0.351         2 #> 3            1     0.471         3 #> 4            1     0.591         4 #> 5            1     0.711         5 #> ...        ...       ...       ... #> 7598         1   899.491      7598 #> 7599         1   899.613      7599 #> 7600         1   899.747      7600 #> 7601         1   899.872      7601 #> 7602         1   899.993      7602 #>  ... 27 more variables/columns. #>  #> file(s): #> PestMix1_DDA.mzML  ## The export functionality also ensures that the data/object can be ## completely restored, i.e., for `Spectra` objects also their ## *processing queue* is preserved/stored. To show this we below first ## filter the spectra object by retention time and m/z:  sps_filt <- sps |>     filterRt(c(400, 600)) |>     filterMzRange(c(200, 300)) ## The filtered object has less spectra length(sps_filt) #> [1] 2054 length(sps) #> [1] 7602 ## And also less mass peaks per spectrum lengths(sps_filt[1:3]) #> [1]   0   0 101 lengths(sps[1:3]) #> [1] 223 211 227  d <- file.path(tempdir(), \"spectra_example2\") saveMsObject(sps_filt, PlainTextParam(d))  ## The directory contains now an additional file with the processing ## queue of the `Spectra`. dir(d) #> [1] \"ms_backend_data.txt\"           \"spectra_processing_queue.json\" #> [3] \"spectra_slots.txt\"              ## Restoring the object again. sps_in <- readMsObject(Spectra(), PlainTextParam(d)) #> backend MsBackendMzR  ## Both objects have the same processing history sps_filt #> MSn data (Spectra) with 2054 spectra in a MsBackendMzR backend: #>        msLevel     rtime scanIndex #>      <integer> <numeric> <integer> #> 1            2   400.088      3242 #> 2            2   400.208      3243 #> 3            1   400.346      3244 #> 4            2   400.498      3245 #> 5            2   400.618      3246 #> ...        ...       ...       ... #> 2050         2   599.253      5291 #> 2051         2   599.373      5292 #> 2052         1   599.511      5293 #> 2053         1   599.636      5294 #> 2054         2   599.904      5295 #>  ... 33 more variables/columns. #>  #> file(s): #> PestMix1_DDA.mzML #> Lazy evaluation queue: 1 processing step(s) #> Processing: #>  Filter: select retention time [400..600] on MS level(s) 1 2 [Thu Sep 19 13:35:49 2024] #>  Filter: select peaks with an m/z within [200, 300] [Thu Sep 19 13:35:49 2024]  sps_in #> MSn data (Spectra) with 2054 spectra in a MsBackendMzR backend: #>        msLevel     rtime scanIndex #>      <integer> <numeric> <integer> #> 1            2   400.088      3242 #> 2            2   400.208      3243 #> 3            1   400.346      3244 #> 4            2   400.498      3245 #> 5            2   400.618      3246 #> ...        ...       ...       ... #> 2050         2   599.253      5291 #> 2051         2   599.373      5292 #> 2052         1   599.511      5293 #> 2053         1   599.636      5294 #> 2054         2   599.904      5295 #>  ... 27 more variables/columns. #>  #> file(s): #> PestMix1_DDA.mzML #> Lazy evaluation queue: 1 processing step(s) #> Processing: #>  Filter: select retention time [400..600] on MS level(s) 1 2 [Thu Sep 19 13:35:49 2024] #>  Filter: select peaks with an m/z within [200, 300] [Thu Sep 19 13:35:49 2024]   ## Same number of spectra length(sps_filt) #> [1] 2054 length(sps_in) #> [1] 2054  ## Same number of mass peaks (after filtering) lengths(sps_filt[1:3]) #> [1]   0   0 101 lengths(sps_in[1:3]) #> [1]   0   0 101"},{"path":"https://rformassspectrometry.github.io/MsIO/reference/mzTabParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Store xcms preprocessing results to a file in mzTab-M format. — mzTabParam","title":"Store xcms preprocessing results to a file in mzTab-M format. — mzTabParam","text":"saveMsObject() readMsObject() methods mzTabParam option enable users save/load XcmsExperiment objects Mz-Tab-m file format. Mainly metadata (MTD) Small molecule feature (SMF) tables represent XcmsExperiment. specifically, sampleData() object stored metadata section (MTD) along user-inputed studyId  polarity. featureDefinitions() stored small molecule feature (SMF) section default mzmed, rtmed, rtmin rtmax exported. info avaialble featureDefinitions() can exported specifying optionalFeatureColumns parameter. featureValues() also stored small molecule feature (SMF) section. small molecule summary section (SML) filled null values annotation identification compound performed xcms. Writing data folder contains already exported data result error.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/mzTabParam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store xcms preprocessing results to a file in mzTab-M format. — mzTabParam","text":"","code":"mzTabParam(   studyId = character(),   polarity = c(\"positive\", \"negative\"),   sampleDataColumn = character(),   path = tempdir(),   optionalFeatureColumns = character(),   ... )  # S4 method for class 'XcmsExperiment,mzTabParam' saveMsObject(object, param)"},{"path":"https://rformassspectrometry.github.io/MsIO/reference/mzTabParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store xcms preprocessing results to a file in mzTab-M format. — mzTabParam","text":"studyId character(1) filename object saved mzTab-M format mzTab-ID file. polarity character(1) Describes polarity experiment. Two inputs possible, \"positive\" (default) \"negative\". sampleDataColumn character strings corresponding column name(s) sampleData() XcmsExperiment object different variables experiment, example \"phenotype\", \"sample_type\", etc... path character(1) Define file going stored. default tempdir(). optionalFeatureColumns Optional columns featureDefinitions() exported . example \"ms_level\", \"npeaks\", etc... ... additional optional arguments. See documentation respective method information. object saveMsObject(): MS data object save, readMsObject(): MS data object returned param object defining (eventually configuring) file format file name directory /data object exported/imported.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/mzTabParam.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Store xcms preprocessing results to a file in mzTab-M format. — mzTabParam","text":"dots Correspond optional parameters passed featureValues() function. (e.g. parameters method value).","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/mzTabParam.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Store xcms preprocessing results to a file in mzTab-M format. — mzTabParam","text":"function build output fit recommendation mzTab-M file format version 2.0. can found : (http://hupo-psi.github.io/mzTab/2_0-metabolomics-release/mzTab_format_specification_2_0-M_release.html)","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/mzTabParam.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Store xcms preprocessing results to a file in mzTab-M format. — mzTabParam","text":"Hoffmann N, Rein J, Sachsenberg T, Hartler J, Haug K, Mayer G, Alka O, Dayalan S, Pearce JTM, Rocca-Serra P, Qi D, Eisenacher M, Perez-Riverol Y, Vizcaino JA, Salek RM, Neumann S, Jones AR. mzTab-M: Data Standard Sharing Quantitative Results Mass Spectrometry Metabolomics. Anal Chem. 2019 Mar 5;91(5):3302-3310. doi: 10.1021/acs.analchem.8b04310. Epub 2019 Feb 13. PMID: 30688441; PMCID: PMC6660005.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MsIO/reference/mzTabParam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Store xcms preprocessing results to a file in mzTab-M format. — mzTabParam","text":"Philippine Louail, Johannes Rainer","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/mzTabParam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store xcms preprocessing results to a file in mzTab-M format. — mzTabParam","text":"","code":"## Load a test data set with detected peaks, of class `XcmsExperiment` library(xcms) test_xcms <- loadXcmsData()  ## Define param param <- mzTabParam(studyId = \"test\",                     polarity = \"positive\",                     sampleDataColumn = \"sample_type\")  ## Save as a mzTab-M file saveMsObject(test_xcms, param)"},{"path":"https://rformassspectrometry.github.io/MsIO/reference/saveMsObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Save and load MS data objects to and from different file formats — saveMsObject","title":"Save and load MS data objects to and from different file formats — saveMsObject","text":"saveMsObject() readMsObject() methods allow serializing restoring/importing mass spectrometry (MS) data objects language agnostic file formats. type  configuration file format defined second argument method, param. saveMsObject(object, param): saves MS data object object file(s) format defined param. readMsObject(object, param): object defines type MS object returned function param format file name(s) data restored/imported.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/saveMsObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save and load MS data objects to and from different file formats — saveMsObject","text":"","code":"saveMsObject(object, param, ...)  readMsObject(object, param, ...)"},{"path":"https://rformassspectrometry.github.io/MsIO/reference/saveMsObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save and load MS data objects to and from different file formats — saveMsObject","text":"object saveMsObject(): MS data object save, readMsObject(): MS data object returned param object defining (eventually configuring) file format file name directory /data object exported/imported. ... additional optional arguments. See documentation respective method information.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/saveMsObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save and load MS data objects to and from different file formats — saveMsObject","text":"saveMsObject() return value, readMsObject expected return instance class defined object.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/reference/saveMsObject.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Save and load MS data objects to and from different file formats — saveMsObject","text":"Philippine Louail, Johannes Rainer, Laurent Gatto","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MsIO/news/index.html","id":"changes-in-0-0-5","dir":"Changelog","previous_headings":"","what":"Changes in 0.0.5","title":"Version 0.0.5","text":"Add MetaboLights readMsObject() method MsExpriment() objects.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/news/index.html","id":"changes-in-0-0-5-1","dir":"Changelog","previous_headings":"","what":"Changes in 0.0.4","title":"Version 0.0.5","text":"Add alabaster saveObject() readObject() methods well saveMsObject() readMsObject() methods AlabasterParam param MsBackendMzR, Spectra, MsExperiment XcmsExperiment objects.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/news/index.html","id":"changes-in-0-0-5-2","dir":"Changelog","previous_headings":"","what":"Changes in 0.0.3","title":"Version 0.0.5","text":"Implement saveMsObject() readMsObject() PlainTextParam MsBackendMzR, Spectra, MsExperiment XcmsExperiment.","code":""},{"path":"https://rformassspectrometry.github.io/MsIO/news/index.html","id":"changes-in-0-0-5-3","dir":"Changelog","previous_headings":"","what":"Changes in 0.0.2","title":"Version 0.0.5","text":"Refactor code text-based import export MS data objects.","code":""}]
