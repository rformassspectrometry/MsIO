% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AlabasterParam.R, R/MsBackendMetaboLights.R,
%   R/MsBackendMzR.R, R/MsExperiment.R, R/Spectra.R, R/XcmsExperiment.R
\name{AlabasterParam}
\alias{AlabasterParam}
\alias{readObject}
\alias{saveObject,MsExperimentFiles-method}
\alias{saveObject,MsBackendMetaboLights-method}
\alias{saveMsObject,MsBackendMetaboLights,AlabasterParam-method}
\alias{readMsObject,MsBackendMetaboLights,AlabasterParam-method}
\alias{saveObject,MsBackendMzR-method}
\alias{saveMsObject,MsBackendMzR,AlabasterParam-method}
\alias{readMsObject,MsBackendMzR,AlabasterParam-method}
\alias{saveObject,MsExperiment-method}
\alias{saveMsObject,MsExperiment,AlabasterParam-method}
\alias{readMsObject,MsExperiment,AlabasterParam-method}
\alias{saveObject,Spectra-method}
\alias{saveMsObject,Spectra,AlabasterParam-method}
\alias{readMsObject,Spectra,AlabasterParam-method}
\alias{saveObject,XcmsExperiment-method}
\alias{saveMsObject,XcmsExperiment,AlabasterParam-method}
\alias{readMsObject,XcmsExperiment,AlabasterParam-method}
\title{Store MS data objects using the alabaster framework}
\usage{
AlabasterParam(path = tempdir())

\S4method{saveObject}{MsBackendMetaboLights}(x, path, ...)

\S4method{saveMsObject}{MsBackendMetaboLights,AlabasterParam}(object, param)

\S4method{readMsObject}{MsBackendMetaboLights,AlabasterParam}(object, param, offline = FALSE)

\S4method{saveObject}{MsBackendMzR}(x, path, ...)

\S4method{saveMsObject}{MsBackendMzR,AlabasterParam}(object, param)

\S4method{readMsObject}{MsBackendMzR,AlabasterParam}(object, param, spectraPath = character())

\S4method{saveObject}{MsExperiment}(x, path, ...)

\S4method{saveMsObject}{MsExperiment,AlabasterParam}(object, param)

\S4method{readMsObject}{MsExperiment,AlabasterParam}(object, param, ...)

\S4method{saveObject}{Spectra}(x, path, ...)

\S4method{saveMsObject}{Spectra,AlabasterParam}(object, param)

\S4method{readMsObject}{Spectra,AlabasterParam}(object, param, ...)

\S4method{saveObject}{XcmsExperiment}(x, path, ...)

\S4method{saveMsObject}{XcmsExperiment,AlabasterParam}(object, param)

\S4method{readMsObject}{XcmsExperiment,AlabasterParam}(object, param, ...)
}
\arguments{
\item{path}{\code{character(1)} with the name of the directory where the MS data
object should be saved to or from which it should be restored.
Importantly, path should point to a \strong{new} folder, i.e. a directory
that \strong{does not already exist}.}

\item{x}{MS data object to export. Can be one of the supported classes
listed below.}

\item{...}{optional additional parameters passed to the downstream
functions, such as for example \code{spectraPath} described above.}

\item{object}{for \code{saveMsObject()}: the MS data object to save, for
\code{readMsObject()}: the MS data object that should be returned}

\item{param}{an object defining and (eventually configuring) the file format
and file name or directory to/from which the data object should be
exported/imported.}

\item{offline}{For \code{readMsObject()} and \code{readObject()} to load MS data as a
\code{MsBackendMetaboLights()}: \code{logical(1)} to evaluate the local file cache
and only load local files. Thus \code{offline = TRUE} does not need an active
internet connection, but fails if one of more files are not cached
locally.}

\item{spectraPath}{For \code{readMsObject()}: \code{character(1)} optionally allowing
to define the (absolute) path where the spectra files (\emph{data storage
files}) can be found. This parameter is used for \code{MsBackendMzR} (see
descriptions below) and can be passed through \code{...} also to
\code{readMsObject()} functions for other classes (such as \code{Spectra},
\code{MsExperiment} etc).}
}
\value{
For \code{AlabasterParam()}: an instance of \code{AlabasterParam} class. For
\code{readObject()} the exported object in the specified path (depending on
the type of object defined in the \emph{OBJECT} file in the path. For
\code{readMsObject()} the exported data object, defined with the function's
first parameter, from the specified path. \code{saveObject()} and
\code{saveMsObject()} don't return anything.
}
\description{
The \href{https://github.com/ArtifactDB/alabaster.base}{\emph{alabaster} framework}
provides the methodology to save R objects to on-disk representations/
storage modes which are programming language independent (in contrast to
e.g. R's RDS files). By using standard file formats such as JSON and HDF5,
alabaster ensures that the data can also be read and imported by other
programming languages such as Python or Javascript. This improves
interoperability between application ecosystems.

The \emph{alabaster} package defines the \code{\link[alabaster.base:saveObject]{alabaster.base::saveObject()}} and \code{\link[=readObject]{readObject()}}
methods. Implementations of these methods are available for the following
classes hence allowing to use \code{saveObject()} and \code{readObject()} directly on
these objects:
\itemize{
\item \code{MsBackendMzR}, defined in the
\href{https://bioconductor.org/packages/Spectra}{\emph{Spectra}} package.
\item \code{MsBackendMetaboLights}, defined in the
\href{https://github.com/RforMassSpectrometry/MsBackendMetaboLights}{\emph{MsBackendMetaboLights}}
package.
\item \code{Spectra}, defined in the
\href{https://bioconductor.org/packages/Spectra}{\emph{Spectra}} package.
\item \code{MsExperiment}, defined in the
\href{https://bioconductor.org/packages/MsExperiment}{\emph{MsExperiment}} package.
\item \code{XcmsExperiment}, defined in the
\href{https://bioconductor.org/packages/xcms}{\emph{xcms}} package.
}

In addition, the \emph{MsIO} package defines the \code{AlabasterParam} which can be
used to write or read MS objects using the \code{saveMsObject()} and
\code{readMsObject()} methods. This allows additional configurations and
customizations to the export or import process. It is thus for example
possible to specify the path to the original MS data files for \emph{on-disk} MS
representations such as the \code{MsBackendMzR} which enables to import a stored
object even if either the object or the original MS data files have been
moved to a different directory or file system.

Importantly, it is only possible to save \strong{one object in one directory}. To
overwrite an existing stored object in a folder, that folder has to be
deleted beforehand.

Details and properties for the \emph{alabaster}-based storage modes for the
various supported MS data objects are listed in the following sections.
}
\section{On-disk storage for \code{MsBackendMzR} objects}{


\code{MsBackendMzR} objects can be exported or imported using the
\code{saveMsObject()} or \code{readMsObject()} functions to and from \emph{alabaster}-based
storage modes using the \code{AlabasterParam} parameter object. Alternatively
\emph{alabaster}'s \code{saveObject()} and \code{readObject()} can be used. The parameter
\code{spectraPath} allows to define an alternative path to the original
data files (in case these were moved). This parameter can be passed as
additional parameter to both the \code{readObject()} as well as the
\code{readMsObject()} methods.

The format of the folder contents follows the \emph{alabaster} format: a file
\emph{OBJECT} (in JSON format) defines the type of object that was stored in the
directory while the object's data, for \code{MsBackendMzR}, is stored in
sub-folders \emph{peaks_variables} (a \code{character} with the names of the peaks
variables of the object) and \emph{spectra_data} (the metadata for all spectra).
Each sub-folder contains also an \emph{OBJECT} file defining the object's type
and an additional file (in HDF5 format) containing the data. See examples
below for details.
}

\section{On-disk storage for \code{MsBackendMetaboLights} objects}{


The \code{MsBackendMetaboLights} extends the \code{MsBackendMzR} backend and hence the
same files are stored. When a \code{MsBackendMetaboLights} object is restored,
the \code{mtbls_sync()} function is called to check for presence of all MS data
files and, if missing, re-download them from the \emph{MetaboLights} repository
(if parameter \code{offline = FALSE} is used).
}

\section{On-disk storage for \code{Spectra} objects}{


\code{Spectra} objects can be exported/imported using \code{saveMsObject()} and
\code{readMsObject()} with an \code{AlabasterParam}, or using the \code{saveObject()}
and \code{readObject()} functions. Both read functions allow to pass additional
parameters (such as \code{spectraPath}) to the import function for the
\code{Spectra}'s backend.

The content of the folder with the stored \code{Spectra} data contains the
\emph{OBJECT} file defining the type of the object stored in that directory and
the \emph{spectra_processing_queue.json} file that contains the \emph{processing queue}
of the \code{Spectra} objects. All other slots of the object are saved in
\emph{alabaster} format into their respective sub-directories: \emph{backend} for the
\code{MsBackend} (see also \code{MsBackendMzR} above), \emph{metadata} for the metadata
slot, \emph{processing} for the processing log, \emph{processing_chunk_size} with
the size for chunk-wise processing and \emph{processing_queue_variables} for
spectra/peaks variables that are needed for the processing queue.
}

\section{On-disk storage for \code{MsExperiment} objects}{


\code{MsExperiment} is a container for various (different) MS data objects
related to the same \emph{experiment}. It is a very flexible object that can, but
does not must contain actual MS data in form of e.g. a \code{Spectra} object.
For the alabaster-based disk storage of an \code{MsExperiment}, each of the
object's slots gets exported separately into its own subfolder within the
object's directory (defined with parameter \code{path}). For the export of the
individual slots, the respective \code{saveObject()} method is used. Similar to
all other objects listed here, \code{MsExperiment} can be stored using either
\code{saveObject()} or \code{saveMsObject} (with \code{AlabasterParam}) and \emph{restored}
using \code{readObject()} or \code{readMsObject()} (with \code{MsExperiment()} passed as
the first parameter and \code{AlabasterParam} as second). The read functions
support passing additional parameters to the import function(s) for object's
MS data object(s), such as the \code{spectraPath} parameter described above
through \code{...}.

The content of the folder with the stored \code{MsExperiment} data contains a
file \code{OBJECT} (in JSON format, with the type of class defined as
\code{"ms_experiment"}) and subfolders for the various slots, each saved to disk
using the data type-specific \code{saveObject()} function:
\itemize{
\item \verb{@sampleData}: \code{DataFrame} stored into a folder named \emph{sample_data}.
\item \verb{@sampleDataLinks}: the \code{List} is stored into a folder named
\emph{sample_data_links}, its \emph{metadata columns} \code{DataFrame} (i.e. \code{mcols()}
of the \code{List}) into a folder named \emph{sample_data_links_mcols}.
\item \verb{@spectra}: if not \verb{NULL, a }Spectra\verb{object stored into a folder with the name *spectra* (using}saveObject()\code{of}Spectra\verb{objects described above). This requires the *alabaster.se* package to be installed. If the value of the}@spectra\verb{slot is}NULL` no directory \emph{spectra} is
created.
\item \verb{@experimentFiles}: \code{MsExperimentFiles} object saved using \code{saveObject()}
into a folder named \emph{experiment_files}. \code{MsExperimentFiles} are saved as
a named list of \code{character} strings.
\item \verb{@qdata}: if not \code{NULL}, the object in this slot (either a \code{QFeatures} or
\code{SummarizedExperiment}) is stored into a folder with the name \emph{qdata}
using the \code{saveObject()} method of the respective object. If the value for
the \verb{@qdata} slot is \code{NULL} the folder \emph{qdata} is not created. At present,
export of \code{QFeatures} objects is not supported!
\item \verb{@otherData}: \code{List} data is saved into a folder named \emph{other_data}.
\item \verb{@metadata}: \code{List} data is saved into a filder named \emph{metadata}.
}

Note that the data type of the \code{assays} of imported (previously stored)
\code{SummarizedExperiment} objects are of type \code{ReloadedMatrix}.
}

\section{On-disk storage for \code{XcmsExperiment} objects}{


\code{XcmsExperiment} objects extend the \code{MsExperiment} object and contain in
addition the results of a preprocessing of the MS data using the \emph{xcms}
package. These objects can be exported/imported in the formats used for
\emph{alabaster}-based storage using the \code{saveObject()} and \code{readObject()}
functions as well as using \code{saveMsObject()} and \code{readMsObject()} with
an \code{AlabasterParam} parameter object. As with all other methods, additional
parameters can be passed with the \code{...} parameter (such as the
\code{spectraData} parameter for import of a \code{MsBackendMzR} discussed above).
The storage directory contains all files and folders created by the export
of the \code{MsExperiment} (see above) and in addition the specific results
of \emph{xcms} from the respective slots of the object:
\itemize{
\item \verb{@chromPeaks}: this numeric matrix is stored in a folder names
\emph{chrom_peaks}.
\item \verb{@chromPeakData}: this \code{data.frame} is first converted to a \code{DataFrame}
and then stored to a folder \emph{chrom_peak_data} (in the \emph{alabaster} format
for \code{DataFrame}).
\item \verb{@featureDefinitions}: this \code{data.frame} is first converted to a
\code{DataFrame} and then stored to a folder \emph{feature_definitions} (also in
\emph{alabaster} format for \code{DataFrame}).
\item \verb{@processHistory}: the list of \code{ProcessHistory} objects is stored in JSON
format to a file \emph{xcms_experiment_process_history.json}.
}
}

\examples{

########
## Export and import a `MsBackendMzR` object:
####

library(Spectra)
library(msdata)
fl <- system.file("TripleTOF-SWATH", "PestMix1_DDA.mzML", package = "msdata")
be <- backendInitialize(MsBackendMzR(), fl)
be

## Export the object to a temporary directory using the alabaster framework;
## the equivalent command using the parameter object would be
## `saveMsObject(be, AlabasterParam(d))`.
d <- file.path(tempdir(), "ms_backend_mzr_example")
saveObject(be, d)

## List the content of the folder
dir(d, recursive = TRUE)

## The data can be imported again using alabaster's readObject() function
be_in <- readObject(d)
be_in

## Alternatively, the data could be restored also using
be_in <- readMsObject(MsBackendMzR(), AlabasterParam(d))

all.equal(mz(be), mz(be_in))


########
## Export and import of `Spectra` objects:
####

## Create a `Spectra` object with a `MsBackendMzR` backend.
s <- Spectra(fl)

## Define the folder to which to export and export the object
d <- file.path(tempdir(), "spectra_example")
saveMsObject(s, AlabasterParam(d))

## List the content of the directory
dir(d, recursive = TRUE)

## Restore the `Spectra` object again
s_in <- readMsObject(Spectra(), AlabasterParam(d))
s_in

## Alternatively, it would also be possible to just import the
## `MsBackendMzR` of the `Spectra`:
be_in <- readMsObject(MsBackendMzR(), AlabasterParam(file.path(d, "backend")))
be_in


########
## Export and import of `MsExperiment` objects:
####

library(MsExperiment)

## Create a new `MsExperiment` with sample data and our previously defined
## `Spectra` as its MS data
m <- MsExperiment(
    sampleData = data.frame(name = c("a", "b"), index = 1:2),
    spectra = s)
m

d <- file.path(tempdir(), "ms_experiment_example")
saveObject(m, d)

## List directory content
dir(d)

## Restore the stored object
m_in <- readObject(d)

m_in


########
## Export and import of `XcmsExperiment` objects:
####

## `XcmsExperiment` objects extend `MsExperiment` to represent all
## data of an MS experiment and contain in addition the results
## of the preprocessing of the data with the *xcms* package. Below
## we load the *xcms* package and load an example result object from that
## package.
library(xcms)
x <- loadXcmsData()
x

## Store this result object to a folder
d <- file.path(tempdir(), "xcms_experiment_example")
saveMsObject(x, AlabasterParam(d))

dir(d)

## Restore the data; eventually needed additional parameters, such as
## `spectraPath` to restore a `MsBackendMzR` if the original data files
## have been moved, could be passed with the `...` parameter of
## `readMsExperiment()`.
x_in <- readMsObject(XcmsExperiment(), AlabasterParam(d))
x_in
}
\seealso{
Other MS object export and import formats.: 
\code{\link{PlainTextParam}},
\code{\link{mzTabParam}}
}
\author{
Johannes Rainer, Philippine Louail
}
\concept{MS object export and import formats.}
